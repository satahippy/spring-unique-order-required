group 'com.github.satahippy'
version '0.1.0.RELEASE'

ext {
    springVersion = "4.3.9.RELEASE"
    springBootVersion = "1.5.4.RELEASE"
    junitVersion = "4.12"

    pomFile = file("${project.buildDir}/generated-pom.xml")
    isReleaseVersion = !(project.version =~ /-SNAPSHOT$/)
}

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven-publish'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework:spring-context:$springVersion")
    compile("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion")

    testCompile("junit:junit:$junitVersion")
}

// MAVEN

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    required project.ext.isReleaseVersion
    sign configurations.archives
}

publishing {
    publications {
        jar(MavenPublication) {
            pom.withXml {
                NodeList children = asNode().children()
                Node dependencies = children.find { it.name().localPart == 'dependencies' } as Node

                children[children.indexOf(dependencies) - 1] + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name "${project.name}"
                    description "BeanPostProcessor that checks uniqueness of items order in any iterable field."
                    url 'https://github.com/satahippy/spring-unique-order-required/'
                    licenses {
                        license {
                            name 'The New BSD License'
                            url 'https://github.com/satahippy/spring-unique-order-required/blob/master/LICENSE'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'satahippy'
                            name 'satahippy'
                            email 'satahippy@gmail.com'
                        }
                    }
                    scm {
                        url 'https://github.com/satahippy/spring-unique-order-required/'
                        connection 'scm:git:git://github.com/satahippy/spring-unique-order-required.git'
                        developerConnection 'scm:git:ssh://git@github.com/satahippy/spring-unique-order-required.git'
                    }
                }
            }

            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // Sign the pom.xml and artifacts.
            if (signing.required) {
                // Sign the pom.xml.
                pom.withXml {
                    writeTo(project.ext.pomFile)
                    def pomAscFile = signing.sign(project.ext.pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                    project.ext.pomFile.delete()
                }

                // Sign the artifacts.
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (project.ext.isReleaseVersion) {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            } else {
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
            }
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

model {
    tasks.publishJarPublicationToMavenLocal {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publishJarPublicationToMavenRepository {
        dependsOn(project.tasks.signArchives)
    }
}